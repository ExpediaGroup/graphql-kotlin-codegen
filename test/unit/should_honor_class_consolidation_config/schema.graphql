# typical case where input and output types are consolidated

type MyTypeToConsolidateWithConfig {
  field: [String!]
  field2: NestedTypeToConsolidateWithConfig
}

input MyTypeToConsolidateWithConfigInput {
  field: [String!]
  field2: NestedTypeToConsolidateWithConfigInput
}

type NestedTypeToConsolidateWithConfig {
  field: String
}

input NestedTypeToConsolidateWithConfigInput {
  field: String
}

# case where type has description but input does not

"A description for MyTypeToConsolidate2"
type MyTypeToConsolidate2WithConfig {
  field: String
}

input MyTypeToConsolidate2WithConfigInput {
  field: String
}

# case where input has description but type does not

type MyTypeToConsolidate3WithConfig {
  field: String
}

"It ignores the description on the input when consolidating"
input MyTypeToConsolidate3WithConfigInput {
  field: String
}

# case where both type and input have descriptions

"It always uses the type description when consolidating"
type MyTypeToConsolidate4WithConfig {
  field: String
}

"A description for MyTypeToConsolidateInput4"
input MyTypeToConsolidate4WithConfigInput {
  field: String
}

# case where type and input names do not match

type MyTypeNotToConsolidateWithConfig {
  field: String
}

"The type name must exactly match in order to consolidate"
input MyTypeToNotConsolidateWithConfigInput {
  field: String
}

# case where type has input in the middle of the name

type MyTypeToNotConsolidate2WithConfig {
  field: String
}

input MyTypeInputToNotConsolidate2WithConfig {
  field: String
}

# case where type and input names match but fields do not match

type MyTypeWhereFieldsDoNotMatchWithConfig {
  field: String
  field2: String
}

input MyTypeWhereFieldsDoNotMatchWithConfigInput {
  field: String
  field2: Int
}

# case where parent types reference consolidated types

type MyTypeToConsolidateParentWithConfig {
  field: MyTypeToConsolidateWithConfig
}

input MyTypeToConsolidateInputParentWithConfig {
  field: MyTypeToConsolidateWithConfigInput
}

type MyTypeToConsolidateParent2WithConfig {
  field(input: MyTypeToConsolidateWithConfigInput!): String
}

# case where parent types reference types that should not be consolidated

type MyTypeNotToConsolidateParentWithConfig {
  field: MyTypeNotToConsolidate2WithConfig
}

input MyTypeNotToConsolidateParentWithConfigInput {
  field: MyTypeNotToConsolidate2WithConfigInput
}

type MyTypeNotToConsolidate2WithConfig {
  field1: String
  field2: String
}

input MyTypeNotToConsolidate2WithConfigInput {
  field1: String
}

# case where input fields are a superset of type fields

type MySuperSetTypeWithConfig {
  field: String
  field2: String
}

input MySuperSetTypeWithConfigInput {
  field: String
  field2: String
  field3: Int
}

type MyTypeWithEnumsWithConfig {
  field1: [Enum1WithConfig!]
  field2: [Enum2WithConfig!]
}

input MyTypeWithEnumsWithConfigInput {
  field1: [Enum1WithConfig!]
  field2: [Enum2WithConfig!]
}

enum Enum1WithConfig {
  THIS
  THAT
}

enum Enum2WithConfig {
  THE_OTHER
}
