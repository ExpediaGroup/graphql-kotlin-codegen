type TypeWithOnlyFieldArgs {
  nullableResolver(arg: String!): String
  nonNullableResolver(arg: InputTypeForResolver!): String!
}

type HybridType {
  nullableField: String
  nonNullableField: String!
  nullableResolver(arg: String!): String
  nonNullableResolver(arg: InputTypeForResolver!): String!
}

input InputTypeForResolver {
  field: String
}

interface HybridInterface {
  field1: String
  field2: String!
  nullableListResolver(arg1: Int, arg2: Int!): [String]
  nonNullableListResolver(arg1: Int!, arg2: Int): [String!]!
}

type TypeImplementingInterface implements HybridInterface {
  field1: String
  field2: String!
  booleanField1: Boolean
  booleanField2: Boolean!
  integerField1: Int
  integerField2: Int!
  nullableListResolver(arg1: Int, arg2: Int!): [String]
  nonNullableListResolver(arg1: Int!, arg2: Int): [String!]!
}
